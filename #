import cv2

# Load the Haar cascade classifiers
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')
smile_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_smile.xml')
catface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalcatface_extended.xml')
fullbody_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_fullbody.xml')
leye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_lefteye_2splits.xml')
reye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_righteye_2splits.xml')
profileface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_profileface.xml')
upperbody_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_upperbody.xml')
lowerbody_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_lowerbody.xml')

# Open the webcam
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # Iterate over detected faces
    for (x, y, w, h) in faces:
        # Detect eyes in the face region
        roi_gray = gray[y:y + h, x:x + w]
        eyes = eye_cascade.detectMultiScale(roi_gray)

        # Detect smile
        smile = smile_cascade.detectMultiScale(roi_gray, scaleFactor=1.8, minNeighbors=20, minSize=(25, 25))

        # Detect cat face
        catfaces = catface_cascade.detectMultiScale(roi_gray, scaleFactor=1.3, minNeighbors=5)

        # Detect full body
        fullbodies = fullbody_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

        # Detect left eye
        leyes = leye_cascade.detectMultiScale(roi_gray)

        # Detect right eye
        reyes = reye_cascade.detectMultiScale(roi_gray)

        # Detect profile face
        profilefaces = profileface_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

        # Detect upper body
        upperbodies = upperbody_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

        # Detect lower body
        lowerbodies = lowerbody_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

        # Determine age range based on some assumptions
        # This is a very basic example and may not be accurate
        age_range = f"{int(20 + 2 * (w / 10))}-{int(36 + 2 * (w / 10))}"
        Nam = "Unknown"
        Gender = "Unknown"
        emotions = "Unknown"

        # Display the age range on the frame
        cv2.putText(frame, "Name: " + Nam, (x, y - 100), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(frame, "Age Range: " + age_range, (x, y - 70), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(frame, "Gender: " + Gender, (x, y - 40), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(frame, "Emotion: " + emotions, (x, y - 8), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        # Display the detected regions on the frame
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(frame, (x + ex, y + ey), (x + ex + ew, y + ey + eh), (255, 0, 0), 2)

        for (sx, sy, sw, sh) in smile:
            cv2.rectangle(frame, (x + sx, y + sy), (x + sx + sw, y + sy + sh), (0, 0, 255), 2)

        for (cx, cy, cw, ch) in catfaces:
            cv2.rectangle(frame, (x + cx, y + cy), (x + cx + cw, y + cy + ch), (0, 255, 255), 2)

        for (fx, fy, fw, fh) in fullbodies:
            cv2.rectangle(frame, (fx, fy), (fx + fw, fy + fh), (255, 255, 0), 2)

        for (lex, ley, lew, leh) in leyes:
            cv2.rectangle(frame, (x + lex, y + ley), (x + lex + lew, y + ley + leh), (255, 255, 255), 2)

        for (rex, rey, rew, reh) in reyes:
            cv2.rectangle(frame, (x + rex, y + rey), (x + rex + rew, y + rey + reh), (255, 255, 255), 2)

        for (px, py, pw, ph) in profilefaces:
            cv2.rectangle(frame, (px, py), (px + pw, py + ph), (0, 255, 0), 2)

        for (ubx, uby, ubw, ubh) in upperbodies:
            cv2.rectangle(frame, (ubx, uby), (ubx + ubw, uby + ubh), (255, 0, 255), 2)

        for (lbx, lby, lbw, lbh) in lowerbodies:
            cv2.rectangle(frame, (lbx, lby), (lbx + lbw, lby + lbh), (255, 0, 255), 2)

        # Draw rectangle around the face
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Display the frame
    cv2.imshow('Enhanced Emotion and Age Detection', frame)

    # Break the loop when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close the window
cap.release()
cv2.destroyAllWindows()
